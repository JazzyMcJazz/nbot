use clap::{value_parser, Arg, ArgAction, ArgMatches, Command};

pub fn get_matches() -> ArgMatches {
    Command::new("nbot")
        .about("An orchestration tool for managing docker containers behind an Nginx reverse proxy.")
        .version("0.0.1")
        .subcommand_required(true)
        .arg_required_else_help(true)
        .author("JazzyMcJazz")
        .subcommand(
            Command::new("up")
                .about("Starts all containers")
                .subcommand_required(false)
                .arg_required_else_help(false)
        )
        .subcommand(
            Command::new("down")
                .about("Stops all containers")
                .subcommand_required(false)
        )
        .subcommand(
            Command::new("nginx")
                .about("Manage nginx installation.")
                .subcommand_required(true)
                .arg_required_else_help(true)
                .subcommand(
                    Command::new("run")
                        .about("Runs nginx in Docker")
                        .arg(
                            Arg::new("build")
                                .short('b')
                                .long("build")
                                .action(ArgAction::SetTrue)
                                .help("Builds nbot/nginx image before running it (will remove existing image)")
                        )
                )
                .subcommand(
                    Command::new("stop")
                        .about("Stops the nginx container")
                        .arg(
                            Arg::new("remove")
                                .short('r')
                                .long("rm")
                                .action(ArgAction::SetTrue)
                                .help("Removes nginx container after stopping it")
                        )
                )
        )
        .subcommand(
            Command::new("rm")
                .about("Removes a project")
                .arg(
                    Arg::new("project")
                        .value_parser(value_parser!(String))
                        .action(ArgAction::Append)
                        .help("Name(s) of the project to remove (required)")
                        .required(true)
                )
        )
        .subcommand(
            Command::new("run")
                .about("Creates or updates a project.\nRun \"nbot run --help\" for more information.")
                .arg(
                    Arg::new("name")
                        .value_parser(value_parser!(String))
                        .short('n')
                        .long("name")
                        .help("Name of the project (required)")
                        .required(true)
                )
                .arg(
                    Arg::new("app")
                        .short('a')
                        .long("app")
                        .help("Name of an app to add to the project (at least 1 required)")
                        .required(true)
                        .action(ArgAction::Append)
                )
                .arg(
                    Arg::new("image")
                        .short('i')
                        .long("image")
                        .help("Image to use for the app (required, exactly 1 per app)")
                        .required(true)
                        .action(ArgAction::Append)
                )
                .arg(
                    Arg::new("env")
                        .short('e')
                        .long("env")
                        .help("Environment variables to add to the app (optional, multiple allowed per app)")
                        .required(false)
                        .action(ArgAction::Append)
                )
                .arg(
                    Arg::new("port")
                        .short('p')
                        .long("port")
                        .help("Ports to add to the app (optional, multiple allowed per app)")
                        .required(false)
                        .action(ArgAction::Append)
                )
                .arg(
                    Arg::new("volume")
                        .short('v')
                        .long("volume")
                        .help("Volumes to add to the app (optional, multiple allowed per app)")
                        .required(false)
                        .action(ArgAction::Append)
                )
                .arg(
                    Arg::new("depends-on")
                        .short('d')
                        .long("depends_on")
                        .help("Apps that this app depends on (optional, multiple allowed per app)")
                        .required(false)
                        .action(ArgAction::Append)
                )
                .arg(
                    Arg::new("domain")
                        .short('o')
                        .long("domain")
                        .help("Domain to use for the project (required if --publish is used)")
                        .required(false)
                )
        )
        .get_matches()
}
